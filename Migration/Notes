Option1: Using Git Commit Mirror Push:

    1. git clone --mirror source-org/source-repo-name
    2. Change the origin reference to new branch
    3. git push --mirror destination-org/destination-repo-name

Limitation:
    1. Commit history and branches are moved but no PR request is moved.
    2. Metadata is not moved, so issues or PR is not moved.

========================================================================================================

Option2: Using GitHub Enterprise Importer Tool:

    Installation:
        1. Install Github CLI  (https://cli.github.com/)
        2. gh auth login (Login to github and goes for authentication)
        3. Install Github Importer extension. (https://github.com/github/gh-gei)

--------------------------------------------------------------------------------------------------------

    Preparing to Migrate:

        1. What is required to migrate? means how many repos, repo size etc.
        2. Prepare pre migrations steps (dry-run) and post migration steps like configure security.
        3. How long migrations time takes.
        4. Delete the dry-run repos.

    GHEC to EMU Migrations:

        1. What is Migrated:
                Git source, PR, Issues, Milestones, Wiki (Excluding attachements), Projects (classic) at repo level, Commit Comments, Active Webhook (must be reenabled), Repository Topics, Repository Settings, Releases, User history, Atatchements

        2. What is NOT Migrated:
                Any projects, Dependabot, Commit status checks, Webhook secrets, Repository stars/watchers, Github Apps and App Install, Rulesets, Tag protection rules, User access to repo, User profile, SSH keys, PAT, Signing Keys.

        3. Limitation of GitHub:
                2GB size limit for single commit.
                255 byte limit for Git reference.
                100MB file size limit. 

        4. Limitation of Github Enterprise Importer:
                10GB size limit for git repo. (git sizer can use to check)
                10GB limit for metadata.
                Git LFS objects not migrated. (Importer can migrate repository which use LFS but not LFS object itself)
                Follow up tasks required. (Configure security)
                Delayed code search functionality. (Reindexing takes couple of hours)
                Ruleset configured for org can cause migrations to fail. (Ifrequire may disable rulesets)

--------------------------------------------------------------------------------------------------------

Migration Process:

Preparation:

        1. Create the PAT in developer settings (if organizational owner)
        2. Add to gh gei grant-migrator-role (If not an organization owner then Allows an organization admin to grant a USER or TEAM the migrator role for a single GitHub organization. The migrator role allows the role 
  assignee to perform migrations into the target organization)
        3. Refer the page https://docs.github.com/en/migrations/using-github-enterprise-importer/migrating-between-github-products/managing-access-for-a-migration-between-github-products
        4. Set the environment variable GH_SOURCE_PAT env variable or --github-source-pat  (Source Org)
        5. Set the environment variable GH_PAT env variable or --github-target-pat         (Target Org)

Migration:

        1. gh gei migrate-repo --github-source-org <github-source-org>  --github-target-org <github-target-org>  --source-repo <source-repo> 
                    Minimum option required.
        2. It migrated the issues, PR. Additional issue is created which contains the migration status. But with users shows as mannequin user because which require to map old user with new user.
        3. Sometimes releases cause size issue --skip-releases  (It skips releases when migrating)
        
--------------------------------------------------------------------------------------------------------



        





        
